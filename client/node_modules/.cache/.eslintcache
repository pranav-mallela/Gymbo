[{"C:\\Users\\prana\\gymbo\\client\\src\\index.js":"1","C:\\Users\\prana\\gymbo\\client\\src\\App.js":"2","C:\\Users\\prana\\gymbo\\client\\src\\components\\Header.js":"3","C:\\Users\\prana\\gymbo\\client\\src\\pages\\Profile.js":"4","C:\\Users\\prana\\gymbo\\client\\src\\pages\\Machines.js":"5","C:\\Users\\prana\\gymbo\\client\\src\\pages\\Manage.js":"6","C:\\Users\\prana\\gymbo\\client\\src\\components\\About.js":"7","C:\\Users\\prana\\gymbo\\client\\src\\components\\Equipment.js":"8","C:\\Users\\prana\\gymbo\\client\\src\\components\\Joinee.js":"9"},{"size":332,"mtime":1657548336423,"results":"10","hashOfConfig":"11"},{"size":747,"mtime":1657548336417,"results":"12","hashOfConfig":"11"},{"size":1072,"mtime":1657548336421,"results":"13","hashOfConfig":"11"},{"size":8403,"mtime":1657624801247,"results":"14","hashOfConfig":"11"},{"size":5086,"mtime":1657622670184,"results":"15","hashOfConfig":"11"},{"size":10537,"mtime":1657622683547,"results":"16","hashOfConfig":"11"},{"size":520,"mtime":1657548336418,"results":"17","hashOfConfig":"11"},{"size":597,"mtime":1657548336420,"results":"18","hashOfConfig":"11"},{"size":1579,"mtime":1657548336422,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cz4isz",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\prana\\gymbo\\client\\src\\index.js",[],[],"C:\\Users\\prana\\gymbo\\client\\src\\App.js",["50"],[],"import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Manage from \"./pages/Manage\";\r\nimport Header from \"./components/Header\";\r\nimport Profile from \"./pages/Profile\";\r\nimport Machines from \"./pages/Machines\";\r\nimport { useLocation, BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\n export default function App()\r\n {\r\n    const location = useLocation();\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Header />\r\n        <Routes location={location} key={location.key}>\r\n          <Route path='/' element={<Manage />} />\r\n          <Route path='/profile' element={<Profile />} />\r\n          <Route path='/machines' element={<Machines />} />\r\n        </Routes>\r\n      </div>\r\n    )\r\n }","C:\\Users\\prana\\gymbo\\client\\src\\components\\Header.js",[],[],"C:\\Users\\prana\\gymbo\\client\\src\\pages\\Profile.js",["51"],[],"C:\\Users\\prana\\gymbo\\client\\src\\pages\\Machines.js",["52"],[],"import React from \"react\";\r\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\r\nimport Equipment from '../components/Equipment';\r\nimport About from '../components/About';\r\n\r\nexport default function Machines()\r\n{\r\n    const [formData, setFormData] = React.useState({machine: \"\", quantity: 0});\r\n    const [search, setSearch] = React.useState(\"\");\r\n    const [machineData, setMachineData] = React.useState([]);\r\n    const [refresh, setRefresh] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        const fetchMachines = async () => {\r\n            const response = await fetch('https://protected-peak-51310.herokuapp.com/api/machines');\r\n            const json = await response.json();\r\n            if(!response.ok) console.log(json.error);\r\n            else setMachineData(json);\r\n        }\r\n        fetchMachines();\r\n    },[refresh])\r\n\r\n    function handleChange(e)\r\n    {\r\n        const {name, value} = e.target;\r\n        setFormData(prevData => ({...prevData, [name] : [value]}));\r\n        if(name === 'machine') setSearch(value);\r\n    }\r\n\r\n    function handleResultClick(e)\r\n    {\r\n        setFormData(prevData => ({...prevData, machine:e.target.innerHTML}))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let _id, method = 'POST', presentQuantity = 0;\r\n        for(let i=0;i<machineData.length;i++)\r\n        {\r\n            if(machineData[i].name === formData.machine)\r\n            {\r\n                _id = machineData[i]._id;\r\n                if(machineData[i].quantity + parseInt(formData.quantity[0]) > 0)\r\n                {\r\n                    method = 'PATCH';\r\n                    presentQuantity = machineData[i].quantity;\r\n                }\r\n                else method = 'DELETE';\r\n            }\r\n        }\r\n        //async function to perform POST/PATCH/DELETE request\r\n        const sendToDB = async () => {\r\n            const machineObj = {\r\n                name: formData.machine.toString(),\r\n                quantity: presentQuantity + parseInt(formData.quantity[0])\r\n            }\r\n            const str = (method === 'POST') ? \"\" : _id;\r\n            const response = await fetch('https://protected-peak-51310.herokuapp.com/api/machines/'+str, {\r\n                method: [method],\r\n                body: JSON.stringify(machineObj),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            const json = await response.json();\r\n            if(!response.ok) console.log(json.error);\r\n            else{\r\n                setFormData({machine: \"\", quantity: 0});\r\n                setRefresh(prev => !prev);\r\n            }\r\n        }\r\n        sendToDB();\r\n    }\r\n\r\n    const searchResults = [];\r\n    for(let i=0;i<machineData.length;i++)\r\n    {\r\n        if(search !== \"\" && machineData[i].name.toLowerCase().includes(search.toLowerCase()))\r\n        {\r\n            searchResults.push(machineData[i]);\r\n        }\r\n    }\r\n\r\n    const machineEls = machineData.map(machineObj => {\r\n        return <Equipment\r\n                    _id={machineObj._id}\r\n                    machine={machineObj.name}\r\n                    quantity={machineObj.quantity}\r\n                />\r\n    })\r\n\r\n    const resultEls = searchResults.map(machineObj => {\r\n        return <div \r\n                    className=\"list-hover list-item\"\r\n                    onClick={handleResultClick}\r\n                >{machineObj.name}</div>\r\n    })\r\n    const aboutMachines = \"It keeps track of the quantity of the different equipment in your gym. Clicking 'Manage' updates the quantity by the quantity entered.\"\r\n\r\n    return(\r\n        <div className=\"page-container\">\r\n            <About\r\n                aboutText={aboutMachines}\r\n            />\r\n            <Row>\r\n                <Col xs={12} md={6}>\r\n                    <Form className=\"container\" onSubmit={handleSubmit}>\r\n                        <h2>Manage Equipment</h2>\r\n                        <Form.Label>Machine</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Machine\" name=\"machine\" value={formData.machine} onChange={handleChange} />\r\n                        {formData.machine != \"\" && <div className=\"container\">\r\n                            {resultEls}\r\n                        </div>}\r\n                        <br />\r\n                        <Form.Label>Quantity</Form.Label>\r\n                        <Form.Control type=\"number\" placeholder=\"Quantity\" name=\"quantity\" value={formData.quantity} onChange={handleChange} />\r\n                        <br />\r\n                        <div className='button-container'>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Manage\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    <div className=\"machine-list-container container\">\r\n                        {machineEls}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\prana\\gymbo\\client\\src\\pages\\Manage.js",["53"],[],"import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Row, Col, Accordion } from \"react-bootstrap\";\r\nimport Joinee from \"../components/Joinee\";\r\nimport About from \"../components/About\";\r\n\r\nexport default function Manage()\r\n{\r\n    const [formData, setFormData] = React.useState({name:\"\", phone:\"\"});\r\n    const [search, setSearch] = React.useState(\"\");\r\n    const [dates, setDates] = React.useState({start:new Date(), end:null});\r\n    const [joineeData, setJoineeData] = React.useState([]);\r\n    const [refresh, setRefresh] = React.useState(false);\r\n    const [displayError, setDisplayError] = React.useState({alreadyExists: false, incorrectLength: false, containsNonDigits: false});\r\n\r\n    React.useEffect(()=> {\r\n        const fetchJoineeData = async() => {\r\n            const response = await fetch('https://protected-peak-51310.herokuapp.com/api/manage');\r\n            const json = await response.json();\r\n            if(response.ok)\r\n            {\r\n                setJoineeData(json);\r\n            }\r\n            else console.log(json.error)\r\n        }\r\n        fetchJoineeData();\r\n    },[refresh])\r\n\r\n    React.useEffect(() => {\r\n        let cnt=0;\r\n        for(let i=0;i<joineeData.length;i++)\r\n        {\r\n            if(formData.phone.toString() === joineeData[i].phone)\r\n            {\r\n                setDisplayError(prevError => ({...prevError, alreadyExists: true}));\r\n            }\r\n            else cnt++;\r\n        }\r\n        if(cnt === joineeData.length) setDisplayError(prevError => ({...prevError, alreadyExists: false}));\r\n        setDisplayError(prevError => ({...prevError, incorrectLength: (formData.phone.toString().length !== 10)}));\r\n        setDisplayError(prevError => ({...prevError, containsNonDigits: !(/^\\d+$/.test(formData.phone.toString()))}));\r\n    },[formData.phone])\r\n\r\n    function handleChange(e)\r\n    {\r\n        const {name, value} = e.target;\r\n        setFormData(prevData => ({...prevData, [name] : [value]}));\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if(displayError.alreadyExists || displayError.incorrectLength || displayError.containsNonDigits) return;\r\n        const newJoinee = {\r\n            name: formData.name.toString(),\r\n            phone: formData.phone.toString(),\r\n            startDate: dates.start,\r\n            endDate: dates.end\r\n        }\r\n        const response = await fetch('https://protected-peak-51310.herokuapp.com/api/manage', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newJoinee),\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        const json = await response.json()\r\n        if(!response.ok)\r\n        {\r\n            //output the error\r\n            console.log(json.error)\r\n        }\r\n        else{\r\n            setFormData({name: \"\", phone: \"\"});\r\n            setDates({start: new Date(), end: null});\r\n            setRefresh(prev => !prev);\r\n        }\r\n    }\r\n\r\n    function handleSearch(e)\r\n    {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const subEnding = [], subDone = [], newJoinee = [];\r\n    const presentDate = new Date();\r\n    const msDay = 60*60*24*1000;\r\n    let classifyNew, classifyEnding;\r\n    const searchResults = [];\r\n    for(let i=0;i<joineeData.length;i++)\r\n    {\r\n        if(joineeData[i].name.toLowerCase().includes(search.toLowerCase()))\r\n            searchResults.push(joineeData[i]);\r\n        classifyNew = Math.floor((presentDate - new Date(joineeData[i].startDate))/msDay);\r\n        classifyEnding = Math.floor((new Date(joineeData[i].endDate) - presentDate)/msDay);\r\n        //Will display if sub is ending, then if new\r\n        if(presentDate > new Date(joineeData[i].endDate)) \r\n            subDone.push(joineeData[i]);\r\n        else if(classifyEnding <= 2) \r\n            subEnding.push(joineeData[i]);\r\n        else if(classifyNew >= -1 && classifyNew <= 2) \r\n            newJoinee.push(joineeData[i]);\r\n    }\r\n\r\n    const resultsEls = searchResults.map(joinee => {\r\n        return <Joinee\r\n                    _id={joinee._id}\r\n                    name={joinee.name}\r\n                    phone={joinee.phone}\r\n                    startDate={joinee.startDate}\r\n                    endDate={joinee.endDate}\r\n                />\r\n    })\r\n    const subEndingEls = subEnding.map(joinee => {\r\n        return <Joinee\r\n                    _id={joinee._id}\r\n                    name={joinee.name}\r\n                    phone={joinee.phone}\r\n                    startDate={joinee.startDate}\r\n                    endDate={joinee.endDate}\r\n                />\r\n    })\r\n    const subDoneEls = subDone.map(joinee => {\r\n        return <Joinee\r\n                    _id={joinee._id}\r\n                    name={joinee.name}\r\n                    phone={joinee.phone}\r\n                    startDate={joinee.startDate}\r\n                    endDate={joinee.endDate}\r\n                />\r\n    })\r\n    const newJoineeEls = newJoinee.map(joinee => {\r\n        return <Joinee\r\n                    _id={joinee._id}\r\n                    name={joinee.name}\r\n                    phone={joinee.phone}\r\n                    startDate={joinee.startDate}\r\n                    endDate={joinee.endDate}\r\n                />\r\n    })\r\n    const aboutManage = \"It manages the joinees of your gym. Clicking on them takes you to the corresponding profile. They are color-coded as follows: Green--new joinee. Yellow--joinee whose subscription ends in 2 days. Red--joinee whose subscription has ended. White--the rest. Clicking the logo redirects to the home page.\";\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <About\r\n                aboutText={aboutManage}\r\n            />\r\n            <Row>\r\n                <Col xs={12} md={6} lg={7}>\r\n                <div className=\"search-container container\">\r\n                    <Form>\r\n                        <Form.Control type=\"text\" placeholder=\"Search for joinee\" onChange={handleSearch} />\r\n                        <br />\r\n                    </Form>\r\n                    {resultsEls}\r\n                </div>\r\n                </Col>\r\n                <Col xs={12} md={6} lg={5}>\r\n                <Accordion className=\"container\">\r\n                    <h2>Dashboard</h2>\r\n                    <Accordion.Item eventKey=\"1\">\r\n                        <Accordion.Header>Subscription Complete ({subDoneEls.length})</Accordion.Header>\r\n                        <Accordion.Body>\r\n                        {subDoneEls}\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                    <Accordion.Item eventKey=\"2\">\r\n                        <Accordion.Header>Subscription Ending ({subEndingEls.length})</Accordion.Header>\r\n                        <Accordion.Body>\r\n                        {subEndingEls}\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                    <Accordion.Item eventKey=\"3\">\r\n                        <Accordion.Header>New Joinees ({newJoineeEls.length})</Accordion.Header>\r\n                        <Accordion.Body>\r\n                        {newJoineeEls}\r\n                        </Accordion.Body>\r\n                    </Accordion.Item>\r\n                </Accordion>\r\n                <Form className=\"container\" onSubmit={handleSubmit}>\r\n                    <h2>Add joinee</h2>\r\n                    {displayError.alreadyExists && <div className=\"error-message\">\r\n                        <p>User already exists with the given phone number. Please change.</p>\r\n                    </div>}\r\n                    {formData.phone !== \"\" && displayError.incorrectLength && <div className=\"error-message\">\r\n                        <p>Phone number must be 10 digits long. Please change.</p>\r\n                    </div>}\r\n                    {formData.phone !== \"\" && displayError.containsNonDigits && <div className=\"error-message\">\r\n                        <p>Phone number must only contain digits 0-9. Please change.</p>\r\n                    </div>}\r\n                    {   !displayError.incorrectLength && \r\n                        !displayError.alreadyExists && \r\n                        formData.name !== \"\" &&\r\n                        dates.start !== null &&\r\n                        dates.end !== null &&\r\n                    <div className=\"success-message\">\r\n                        <p>You're good to go :)</p>\r\n                    </div>}\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Name\" \r\n                        name=\"name\" \r\n                        value={formData.name} \r\n                        onChange={handleChange} \r\n                    />\r\n                    <br />\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Phone number\" \r\n                        name=\"phone\" \r\n                        value={formData.phone} \r\n                        onChange={handleChange} \r\n                    />\r\n                    <br />\r\n                    <div className=\"start-date\">\r\n                        <p>Start Date</p>\r\n                        <DatePicker\r\n                            className=\"date-picker\"\r\n                            selected={dates.start}\r\n                            onChange={date => setDates(prevDates => ({...prevDates, start: date}))}\r\n                            dateFormat='dd/MM/yyyy'\r\n                            minDate={new Date()}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className=\"end-date\">\r\n                        <p>End Date</p>\r\n                        <DatePicker\r\n                            className=\"date-picker\"\r\n                            selected={dates.end}\r\n                            onChange={date => setDates(prevDates => ({...prevDates, end: date}))}\r\n                            dateFormat='dd/MM/yyyy'\r\n                            minDate={dates.start}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className='button-container'>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Add\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\prana\\gymbo\\client\\src\\components\\About.js",[],[],"C:\\Users\\prana\\gymbo\\client\\src\\components\\Equipment.js",[],[],"C:\\Users\\prana\\gymbo\\client\\src\\components\\Joinee.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":7,"column":40,"nodeType":"56","messageId":"57","endLine":7,"endColumn":46},{"ruleId":"58","severity":1,"message":"59","line":42,"column":7,"nodeType":"60","endLine":42,"endColumn":23,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":111,"column":43,"nodeType":"64","messageId":"65","endLine":111,"endColumn":45},{"ruleId":"58","severity":1,"message":"59","line":45,"column":7,"nodeType":"60","endLine":45,"endColumn":23,"suggestions":"66"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'joineeData'. Either include it or remove the dependency array.","ArrayExpression",["67"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["68"],{"desc":"69","fix":"70"},{"desc":"69","fix":"71"},"Update the dependencies array to be: [formData.phone, joineeData]",{"range":"72","text":"73"},{"range":"74","text":"73"},[1917,1933],"[formData.phone, joineeData]",[1951,1967]]